{"version":3,"sources":["Components/NavBar.tsx","CustomHooks/useMediaQuery.tsx","Images/profile.jpg","Images/egypt.jpg","Components/Header.tsx","Components/Profile.tsx","Components/Languages.tsx","Styles/Card.ts","Components/Projects.tsx","App.tsx","index.tsx"],"names":["NavigationWrapper","styled","div","NavLink","a","props","menuState","elem","SocialLink","NavBar","useState","setMenuState","openState","setOpenState","switchMenu","title","isMobile","query","matches","setMatches","useEffect","media","window","matchMedia","listener","addEventListener","removeEventListener","useMediaQuery","menu","push","href","onClick","src","alt","sections","map","console","log","socials","target","rel","icon","mediumIcon","linkedinFill","githubIcon","Div","Img","img","H1","h1","Header","Profile","Egypt","className","Wrapper","LanguageBar","Fill","percentage","LanguageName","Percentage","Languages","name","Card","CardLayout","CardText","p","CardProjectLayout","CardProject","Projects","GlobalStyle","createGlobalStyle","Headers","navSections","App","id","style","margin","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e4dfc60b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport mediumIcon from '@iconify-icons/logos/medium-icon';\r\nimport githubIcon from '@iconify-icons/logos/github-icon';\r\nimport linkedinFill from '@iconify-icons/akar-icons/linkedin-fill';\r\nimport { useMediaQuery } from '../CustomHooks/useMediaQuery';\r\nimport styled from 'styled-components';\r\n\r\nconst NavigationWrapper = styled.div`\r\n  background-color: #5586DE;\r\n  overflow: hidden;\r\n  position: fixed;\r\n  width: 100%;\r\n  top: 0;\r\n`\r\n\r\ntype NavLinkType = {\r\n  menuState: string,\r\n  elem: string\r\n};\r\n\r\nconst NavLink = styled.a<NavLinkType>`\r\n  display: block;\r\n  float: left;\r\n  color: white;\r\n  padding: 14px 16px;\r\n  font-size: 15px;\r\n  text-decoration: none;\r\n  background-color: ${(props: NavLinkType) => props.menuState === props.elem ? \"gray\" : \"#5586DE\"};\r\n  :hover {\r\n    background-color: lightgray;\r\n    color: midnightblue;\r\n  }\r\n  @media only screen and (max-width: 500px) {\r\n    float: none;\r\n    text-align: left;\r\n  }\r\n`\r\n\r\nconst SocialLink = styled(NavLink)`\r\n  float: right;\r\n  @media only screen and (max-width: 500px) {\r\n    float: none\r\n  }\r\n`\r\n\r\nfunction NavBar(props: { sections: Array<string> }) {\r\n  const [menuState, setMenuState] = useState(\"\");\r\n  const [openState, setOpenState] = useState(false);\r\n\r\n  const switchMenu = (title: string) => {\r\n    setMenuState(title);\r\n    setOpenState(false);\r\n  }\r\n  const toggleOpen = () => setOpenState(!openState);\r\n\r\n  let isMobile = useMediaQuery('(max-width: 500px)');\r\n  useEffect(() => {\r\n    if (!isMobile) setOpenState(false);\r\n  }, [isMobile]);\r\n\r\n  let menu = [];\r\n\r\n  if (isMobile) {\r\n    menu.push(<NavLink menuState=\"\" elem=\" \" href=\"#0\" onClick={toggleOpen} key=\"menu\">\r\n      <img src=\"https://img.icons8.com/material-outlined/24/000000/menu--v1.png\" alt=\"Menu\"/>\r\n    </NavLink>);\r\n    if (openState) {\r\n      menu.push(props.sections.map((elem) => {\r\n        return <NavLink menuState={menuState} elem={elem}\r\n          href={\"#\" + elem} \r\n          onClick={() => switchMenu(elem)} \r\n          key={elem}>\r\n          {elem}\r\n        </NavLink>;\r\n      }));\r\n    }\r\n  }\r\n  else {\r\n    menu = props.sections.map((elem) => {\r\n      console.log(menuState, elem);\r\n      return (\r\n        <NavLink menuState={menuState} elem={elem}\r\n                href={\"#\" + elem} \r\n                onClick={() => switchMenu(elem)}\r\n                key={elem}>\r\n        {elem}\r\n      </NavLink>);\r\n    });\r\n  }\r\n\r\n  let socials = isMobile ? null :\r\n    <>\r\n      <SocialLink menuState=\"\" elem=\" \" href=\"https://medium.com/@pysun12\" target=\"_blank\" rel=\"noreferrer\">\r\n        <Icon icon={mediumIcon} />\r\n      </SocialLink>\r\n      <SocialLink menuState=\"\" elem=\" \" href=\"https://www.linkedin.com/in/peterysun/\" target=\"_blank\" rel=\"noreferrer\">\r\n        <Icon icon={linkedinFill} />\r\n      </SocialLink>\r\n      <SocialLink menuState=\"\" elem=\" \" href=\"https://github.com/Narnian12\" target=\"_blank\" rel=\"noreferrer\">\r\n        <Icon icon={githubIcon} />\r\n      </SocialLink>\r\n    </>;\r\n\r\n  return (\r\n    <NavigationWrapper>\r\n      {menu}\r\n      {socials}\r\n    </NavigationWrapper>\r\n  );\r\n}\r\n\r\nexport default NavBar;","// Using similar logic to custom hook found here\r\n// https://www.netlify.com/blog/2020/12/05/building-a-custom-react-media-query-hook-for-more-responsive-apps/\r\nimport { useState, useEffect } from \"react\";\r\n\r\nexport function useMediaQuery(query: string) {\r\n  const [matches, setMatches] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const media = window.matchMedia(query);\r\n    if (media.matches !== matches) {\r\n      setMatches(media.matches);\r\n    }\r\n    const listener = () => setMatches(media.matches);\r\n    media.addEventListener(\"change\", listener);\r\n    return () => media.removeEventListener(\"change\", listener);\r\n  }, [matches, query]);\r\n\r\n  return matches;\r\n}","export default __webpack_public_path__ + \"static/media/profile.df9b74bd.jpg\";","export default __webpack_public_path__ + \"static/media/egypt.e65cb444.jpg\";","import Profile from '../Images/profile.jpg';\r\nimport Egypt from '../Images/egypt.jpg';\r\nimport styled from 'styled-components';\r\n\r\nconst Div = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin: 45px 0px 0px 0px;\r\n  background-color: #5585de;\r\n  background-image: linear-gradient(#5586DE, white);\r\n`\r\n\r\nconst Img = styled.img`\r\n  height: auto;\r\n  max-width: 300px;\r\n  margin: 5px;\r\n`\r\n\r\nconst H1 = styled.h1`\r\n  width: 300px;\r\n`\r\n\r\nfunction Header() {\r\n  return (\r\n    <Div>\r\n      <H1>PS - My Portfolio!</H1>\r\n      <Img src={Profile} alt=\"Profile\"></Img>\r\n      <Img src={Egypt} alt=\"Egypt\"></Img>\r\n    </Div>\r\n  );\r\n}\r\n\r\nexport default Header;","import '../Styles/Card.css';\r\n\r\nfunction Profile() {\r\n  return (\r\n    <div className=\"card-layout\">\r\n      <div className=\"card\">\r\n        <h2>Introduction</h2>\r\n        <p className=\"card-text\">Hello! I'm Peter, an aspiring full-stack developer with experience in \r\n        QA, DevOps, and back-end technologies. My hope for this page is to gain a stronger\r\n        understanding of UI development with the React library, especially with Hooks and TypeScript.\r\n        </p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>Work</h2>\r\n        <p className=\"card-text\">I am a software engineer in Promess, a manufacturing company specializing\r\n          in sensing systems. For a few years, I developed full-stack features in the .NET framework.\r\n          I am also heavily involved in the DevOps operations, using Microsoft Azure and CI/CD pipelines.\r\n        </p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>Education</h2>\r\n        <p className=\"card-text\">I am pursuing a Master of Science in Computer Science at Oakland University.\r\n        I graduated with a Bachelor of Science in Microbiology from the University of Michigan.\r\n        </p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>Research</h2>\r\n        <p className=\"card-text\">\r\n          I am working on analyzing <a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"noreferrer\">Dependency Injection</a> (DI),\r\n          a framework that may help in developing more maintainable software. More specifically, I am currently expanding on\r\n          the CKJM metrics tool to detect the presence of DI in Java projects.\r\n        </p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>Passions</h2>\r\n        <p className=\"card-text\">I enjoy writing. I love writing prose and poetry, and hope to publish a novel one day. I also like playing guitar and piano.\r\n          I am trying to learn a new piano song and would appreciate any suggestions! My musical interests primarily comprise of classical, Christian, and Japanese pop.\r\n        </p>\r\n      </div>\r\n      <div className=\"card\">\r\n        <h2>Current Tech Stack</h2>\r\n        <p className=\"card-text\">I am working and researching with Rust, React, GraphQL, Node.js, and Java.\r\n          Languages I hope to tackle soon include Go and Python, and I want to try Vue.js in the future as well.\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Profile;","import styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n`\r\n\r\nconst LanguageBar = styled.div`\r\n  margin: 5px 10px;\r\n  max-width: 600px;\r\n  width: 100%;\r\n`\r\n\r\n// Generate type interface for style-components\r\ntype FillType = {\r\n  percentage: string\r\n};\r\n\r\n// Cannot create styled-components in render functions\r\nconst Fill = styled.div<FillType>`\r\n  height: 100%;\r\n  background-color: powderblue;\r\n  float: left;\r\n  width: ${(props: FillType) => props.percentage}\r\n`;\r\n\r\nconst LanguageName = styled.div`\r\n  width: 100px;\r\n  float: left;\r\n  font-weight: bold;\r\n  background-color: cornflowerblue;\r\n`\r\n\r\nconst Percentage = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  padding: 0px 10px 0px 0px;\r\n  background-color: lightgray;\r\n`\r\n\r\nfunction Languages() {\r\n  const languages = [\r\n    { name: \"C++\", percentage: \"85%\" },\r\n    { name: \"JavaScript\", percentage: \"75%\" },\r\n    { name: \"React\", percentage: \"60%\" },\r\n    { name: \"HTML\", percentage: \"55%\" },\r\n    { name: \"CSS\", percentage: \"50%\" },\r\n    { name: \"Rust\", percentage: \"50%\" },\r\n    { name: \"C#\", percentage: \"40%\" },\r\n    { name: \"SQL\", percentage: \"40%\" }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {languages.map(elem => {\r\n        return (\r\n          <Wrapper key={elem.name}>\r\n            <LanguageBar>\r\n              <Fill percentage={elem.percentage}>\r\n                <LanguageName><p>{elem.name}</p></LanguageName>\r\n              </Fill>\r\n              <Percentage><p>{elem.percentage}</p></Percentage>\r\n            </LanguageBar>\r\n          </Wrapper>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Languages;","import styled from 'styled-components';\r\n\r\nconst Card = styled.div`\r\n  box-shadow: 5px 5px 5px powderblue;\r\n  padding: 3px;\r\n  margin: 10px;\r\n  max-width: 400px;\r\n`\r\n\r\nconst CardLayout = styled.div`\r\n  margin: 10px 0px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n`\r\n\r\nconst CardText = styled.p`\r\n  min-width: 200px;\r\n  margin: 20px;\r\n  text-align: center;\r\n`\r\n\r\nexport { Card, CardLayout, CardText }","import '../Styles/Card.css';\r\nimport { Card, CardLayout, CardText } from '../Styles/Card';\r\nimport styled from 'styled-components';\r\n\r\nconst CardProjectLayout = styled(CardLayout)`\r\n  justify-content: center\r\n`\r\n\r\nconst CardProject = styled(Card)`\r\n  transition: transform .3s;\r\n  :hover {\r\n    -ms-transform: scale(1.1);\r\n    -webkit-transform: scale(1.1);\r\n    transform: scale(1.1);\r\n  }\r\n`\r\n\r\nfunction Projects() {\r\n  return (\r\n    <CardProjectLayout>\r\n      <CardProject>\r\n        <h2><a href=\"https://github.com/Narnian12/ckjm-analyzer\" target=\"_blank\" rel=\"noreferrer\">ckjm-analyzer</a></h2>\r\n        <CardText>\r\n          CLI application that detects Dependency Injection (DI) occurrences in Java class files,\r\n          using the <a href=\"http://gromit.iiar.pwr.wroc.pl/p_inf/ckjm/\" target=\"_blank\" rel=\"noreferrer\">CKJM-Extended</a> tool to measure metrics.\r\n        </CardText>\r\n        <p><b>Languages/Libraries Used</b>: Rust</p>\r\n      </CardProject>\r\n      <CardProject>\r\n        <h2><a href=\"https://github.com/Narnian12/ps-calculator\" target=\"_blank\" rel=\"noreferrer\">ps-calculator</a></h2>\r\n        <CardText>\r\n          Online calculator that executes simple math, tracks history, and supports keyboard use. Uses regex to generalize computational logic.\r\n        </CardText>\r\n        <p><b>Languages/Libraries Used</b>: React, TypeScript, HTML, CSS</p>\r\n      </CardProject>\r\n      <CardProject>\r\n        <h2><a href=\"https://github.com/Narnian12/todo-app-client\" target=\"_blank\" rel=\"noreferrer\">todo-app-client</a></h2>\r\n        <CardText>\r\n          Client-side application of todo app linked to a server deployed on Heroku.\r\n        </CardText>\r\n        <p><b>Languages/Libraries Used</b>: React, TypeScript, GraphQL, Apollo Client</p>\r\n      </CardProject>\r\n      <CardProject>\r\n        <h2><a href=\"https://github.com/Narnian12/todo-app-server-expanded\" target=\"_blank\" rel=\"noreferrer\">todo-app-server-expanded</a></h2>\r\n        <CardText>\r\n          Server-side application of todo app deployed on Heroku. Uses a Prisma ORM SQLite database to store data.\r\n        </CardText>\r\n        <p><b>Languages/Libraries Used</b>: Node.js, Apollo Server Express, Prisma, GraphQL</p>\r\n      </CardProject>\r\n    </CardProjectLayout>\r\n  );\r\n}\r\n\r\nexport default Projects;","import NavBar from './Components/NavBar';\r\nimport Header from './Components/Header';\r\nimport Profile from './Components/Profile';\r\nimport Languages from './Components/Languages';\r\nimport Projects from './Components/Projects';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  text-align: center;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n`\r\n\r\nconst Headers = styled.h1`\r\n  width: 100%;\r\n  padding-top: 50px;\r\n  margin-top: -50px;\r\n  @media only screen and (max-width: 500px) {\r\n    padding-top: 70px;\r\n    margin-top: -70px;\r\n  }\r\n`\r\n\r\nconst navSections = [\"Profile\", \"Languages\", \"Projects\"];\r\n\r\nfunction App() {\r\n  return (\r\n    <Wrapper>\r\n      <GlobalStyle />\r\n      <NavBar sections={navSections}/>\r\n      <Header />\r\n      <Headers id=\"Profile\">Profile</Headers>\r\n      <Profile />\r\n      <Headers id=\"Languages\">Languages</Headers>\r\n      <p style={{margin: \"0px 40px\"}}>\r\n        Percentage bars are subjective. I am ranking them based on how often and comfortable I am using the language.\r\n      </p>\r\n      <Languages />\r\n      <Headers id=\"Projects\">Projects</Headers>\r\n      <Projects />\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}