{"version":3,"sources":["Components/NavBar.tsx","CustomHooks/useMediaQuery.tsx","Images/egypt.jpg","Components/Header.tsx","Components/AnimeQuote.tsx","Components/Cards.tsx","Components/Languages.tsx","App.tsx","index.tsx","utils/constants/css.ts"],"names":["NavBar","sections","useState","menuState","setMenuState","openState","setOpenState","switchMenu","title","isMobile","query","matches","setMatches","useEffect","media","window","matchMedia","listener","addEventListener","removeEventListener","useMediaQuery","menu","push","NavLink","elem","href","onClick","src","alt","map","Typography","socials","SocialLink","target","rel","icon","linkedinFill","githubIcon","NavigationWrapper","styled","div","a","props","Header","Div","variant","color","Img","Egypt","img","AnimeQuote","quote","character","anime","animeQuote","setAnimeQuote","fetch","then","response","json","quotes","Math","floor","random","length","AnimeQuoteWrapper","Cards","cards","cardStyle","backgroundColor","minWidth","maxWidth","margin","CardLayout","card","Fragment","Card","sx","CardContent","link","header","body","footer","gutterBottom","Languages","languages","Wrapper","LanguageBar","Fill","percentage","LanguageName","name","Percentage","navSections","profileCards","projectCards","App","Headers","id","theme","createTheme","palette","background","paper","text","primary","secondary","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2df3cbd0.chunk.js","sourcesContent":["import { useState, useEffect, FC } from \"react\";\nimport { Icon } from \"@iconify/react\";\nimport mediumIcon from \"@iconify-icons/logos/medium-icon\";\nimport githubIcon from \"@iconify-icons/logos/github-icon\";\nimport linkedinFill from \"@iconify-icons/akar-icons/linkedin-fill\";\nimport { useMediaQuery } from \"../CustomHooks/useMediaQuery\";\nimport styled from \"@emotion/styled\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface NavBarProps {\n  sections: Array<string>;\n}\n\nconst NavBar: FC<NavBarProps> = ({ sections }) => {\n  const [menuState, setMenuState] = useState(\"\");\n  const [openState, setOpenState] = useState(false);\n\n  const switchMenu = (title: string) => {\n    setMenuState(title);\n    setOpenState(false);\n  };\n  const toggleOpen = () => setOpenState(!openState);\n\n  const isMobile = useMediaQuery(\"(max-width: 500px)\");\n  useEffect(() => {\n    if (!isMobile) setOpenState(false);\n  }, [isMobile]);\n\n  let menu = [];\n\n  if (isMobile) {\n    menu.push(\n      <NavLink menuState=\"\" elem=\" \" href=\"#0\" onClick={toggleOpen} key=\"menu\">\n        <img\n          src=\"https://img.icons8.com/material-outlined/24/000000/menu--v1.png\"\n          alt=\"Menu\"\n        />\n      </NavLink>\n    );\n    if (openState) {\n      menu.push(\n        sections.map((elem) => {\n          return (\n            <NavLink\n              menuState={menuState}\n              elem={elem}\n              href={\"#\" + elem}\n              onClick={() => switchMenu(elem)}\n              key={elem}\n            >\n              <Typography>{elem}</Typography>\n            </NavLink>\n          );\n        })\n      );\n    }\n  } else {\n    menu = sections.map((elem) => {\n      return (\n        <NavLink\n          menuState={menuState}\n          elem={elem}\n          href={\"#\" + elem}\n          onClick={() => switchMenu(elem)}\n          key={elem}\n        >\n          <Typography>{elem}</Typography>\n        </NavLink>\n      );\n    });\n  }\n\n  const socials = isMobile ? null : (\n    <>\n      <SocialLink\n        menuState=\"\"\n        elem=\" \"\n        href=\"https://www.linkedin.com/in/peterysun/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Icon icon={linkedinFill} />\n      </SocialLink>\n      <SocialLink\n        menuState=\"\"\n        elem=\" \"\n        href=\"https://github.com/Narnian12\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Icon icon={githubIcon} />\n      </SocialLink>\n    </>\n  );\n\n  return (\n    <NavigationWrapper>\n      {menu}\n      {socials}\n    </NavigationWrapper>\n  );\n};\n\nexport default NavBar;\n\nNavBar.propTypes = {\n  sections: PropTypes.array.isRequired,\n};\n\nconst NavigationWrapper = styled.div`\n  background-color: #404040;\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  top: 0;\n`;\n\ntype NavLinkType = {\n  menuState: string;\n  elem: string;\n};\n\nconst NavLink = styled.a<NavLinkType>`\n  display: block;\n  float: left;\n  color: white;\n  padding: 14px 16px;\n  font-size: 15px;\n  text-decoration: none;\n  background-color: ${(props: NavLinkType) =>\n    props.menuState === props.elem ? \"gray\" : \"#404040\"};\n  :hover {\n    background-color: lightgray;\n    color: #ffffff;\n  }\n  @media only screen and (max-width: 500px) {\n    float: none;\n    text-align: left;\n  }\n`;\n\nconst SocialLink = styled(NavLink)`\n  float: right;\n  @media only screen and (max-width: 500px) {\n    float: none;\n  }\n`;\n","// Using similar logic to custom hook found here\n// https://www.netlify.com/blog/2020/12/05/building-a-custom-react-media-query-hook-for-more-responsive-apps/\nimport { useState, useEffect } from \"react\";\n\nexport function useMediaQuery(query: string): boolean {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const media = window.matchMedia(query);\n    if (media.matches !== matches) {\n      setMatches(media.matches);\n    }\n    const listener = () => setMatches(media.matches);\n    media.addEventListener(\"change\", listener);\n    return () => media.removeEventListener(\"change\", listener);\n  }, [matches, query]);\n\n  return matches;\n}\n","export default __webpack_public_path__ + \"static/media/egypt.e65cb444.jpg\";","import Egypt from \"../Images/egypt.jpg\";\nimport styled from \"@emotion/styled\";\nimport { FC } from \"react\";\nimport Typography from \"@mui/material/Typography\";\n\nconst Header: FC = () => {\n  return (\n    <Div>\n      <Typography variant=\"h2\" color=\"text.primary\">\n        PS Portfolio\n      </Typography>\n      <Img src={Egypt} alt=\"Egypt\"></Img>\n    </Div>\n  );\n};\n\nexport default Header;\n\nconst Div = styled.div`\n  width: 100%;\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  align-items: center;\n  margin: 45px 0px 0px 0px;\n  @media only screen and (max-width: 500px) {\n    margin: 50px 0px 0px 0px;\n  }\n`;\n\nconst Img = styled.img`\n  height: 90px;\n  max-width: 300px;\n  margin: 5px;\n`;\n","import { FC, useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Typography from \"@mui/material/Typography\";\n\nconst AnimeQuote: FC = () => {\n  const [animeQuote, setAnimeQuote] = useState({\n    quote: \"\",\n    character: \"\",\n    anime: \"\",\n  });\n\n  interface AnimeQuote {\n    quote: string;\n    character: string;\n    anime: string;\n  }\n\n  useEffect(() => {\n    fetch(\"https://animechan.vercel.app/api/quotes/anime?title=toradora\")\n      .then((response) => response.json())\n      .then((quotes: [AnimeQuote]) =>\n        setAnimeQuote(quotes[Math.floor(Math.random() * 10)])\n      );\n  }, []);\n  return animeQuote.quote.length === 0 ? (\n    <p>Loading quote...</p>\n  ) : (\n    <AnimeQuoteWrapper>\n      <Typography color=\"text.primary\">\n        <i>&quot;{animeQuote.quote}&quot;</i>\n      </Typography>\n      <Typography color=\"text.secondary\">\n        {animeQuote.character}, <b>{animeQuote.anime}</b>\n        {\" [Generated by \"}\n        <a\n          href=\"https://animechan.vercel.app/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Animechan\n        </a>\n        {\"]\"}\n      </Typography>\n    </AnimeQuoteWrapper>\n  );\n};\n\nexport default AnimeQuote;\n\nconst AnimeQuoteWrapper = styled.div`\n  margin: 10px 20px;\n`;\n","import React, { FC } from \"react\";\nimport Card from \"@mui/material/Card\";\nimport CardContent from \"@mui/material/CardContent\";\nimport styled from \"@emotion/styled\";\nimport Typography from \"@mui/material/Typography\";\nimport { CardInfo } from \"../utils/interfaces\";\nimport PropTypes from \"prop-types\";\n\ninterface ProfileProps {\n  cards: CardInfo[];\n}\n\nconst Cards: FC<ProfileProps> = ({ cards }) => {\n  const cardStyle = {\n    backgroundColor: \"#212121\",\n    minWidth: 300,\n    maxWidth: 400,\n    margin: 1,\n  };\n\n  return (\n    <CardLayout>\n      {cards.map((card) => {\n        return (\n          <React.Fragment key={card.header}>\n            <Card sx={cardStyle}>\n              <CardContent>\n                <Typography variant=\"h5\" color=\"text.primary\">\n                  {card.link ? (\n                    <a href={card.link} target=\"_blank\" rel=\"noreferrer\">\n                      {card.header}\n                    </a>\n                  ) : (\n                    card.header\n                  )}\n                </Typography>\n                <Typography color=\"text.secondary\">{card.body}</Typography>\n              </CardContent>\n              <>\n                {card.footer ? (\n                  <Typography color=\"text.primary\" gutterBottom={true}>\n                    <b>Tech Stack: </b>\n                    {card.footer}\n                  </Typography>\n                ) : (\n                  <></>\n                )}\n              </>\n            </Card>\n          </React.Fragment>\n        );\n      })}\n    </CardLayout>\n  );\n};\n\nexport default Cards;\n\nCards.propTypes = {\n  cards: PropTypes.array.isRequired,\n};\n\nconst CardLayout = styled.div`\n  margin: 10px;\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n","import { FC } from \"react\";\nimport styled from \"@emotion/styled\";\nimport { LanguageInfo } from \"../utils/interfaces\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface LanguagesProps {\n  languages: LanguageInfo[];\n}\n\nconst Languages: FC<LanguagesProps> = ({ languages }) => {\n  return (\n    <>\n      {languages.map((elem) => {\n        return (\n          <Wrapper key={elem.name}>\n            <LanguageBar>\n              <Fill percentage={elem.percentage}>\n                <LanguageName>\n                  <Typography color=\"text.primary\">\n                    <b>{elem.name}</b>\n                  </Typography>\n                </LanguageName>\n              </Fill>\n              <Percentage>\n                <Typography color=\"text.primary\">\n                  <b>{elem.percentage}</b>\n                </Typography>\n              </Percentage>\n            </LanguageBar>\n          </Wrapper>\n        );\n      })}\n    </>\n  );\n};\n\nexport default Languages;\n\nLanguages.propTypes = {\n  languages: PropTypes.array.isRequired,\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst LanguageBar = styled.div`\n  margin: 5px 10px;\n  max-width: 600px;\n  width: 100%;\n`;\n\n// Generate type interface for style-components\ntype FillType = {\n  percentage: string;\n};\n\n// Cannot create styled-components in render functions\nconst Fill = styled.div<FillType>`\n  height: 100%;\n  background-color: #ffffff;\n  float: left;\n  width: ${(props: FillType) => props.percentage};\n`;\n\nconst LanguageName = styled.div`\n  width: 100px;\n  float: left;\n  font-weight: bold;\n  background-color: #404040;\n`;\n\nconst Percentage = styled.div`\n  display: flex;\n  justify-content: flex-end;\n  padding: 0px 10px 0px 0px;\n  background-color: #181818;\n`;\n","import NavBar from \"./Components/NavBar\";\nimport Header from \"./Components/Header\";\nimport AnimeQuote from \"./Components/AnimeQuote\";\nimport Cards from \"./Components/Cards\";\nimport Languages from \"./Components/Languages\";\nimport styled from \"@emotion/styled\";\nimport { FC } from \"react\";\nimport Typography from \"@mui/material/Typography\";\nimport { CardInfo, LanguageInfo } from \"./utils/interfaces\";\n\nconst navSections = [\"Profile\", \"Languages\", \"Projects\"];\n\nconst profileCards: CardInfo[] = [\n  {\n    header: \"Introduction\",\n    body: \"Hello! I am Peter, a full-stack developer with a passion in building software for healthcare.\",\n  },\n  {\n    header: \"Work\",\n    body: \"I am a software engineer in Availity specializing in backend development using .NET Core.\",\n  },\n  {\n    header: \"Education\",\n    body: \"I completed a Master of Science in Computer Science at Oakland University.\",\n  },\n  {\n    header: \"Research\",\n    body: \"I have written an open-source paper on the potential for dependency injection to improve software maintainability.\",\n  },\n  {\n    header: \"Passions\",\n    body: \"I love writing, and hope to publish a novel one day. I enjoy playing guitar and piano.\",\n  },\n  {\n    header: \"Current Tech Stack\",\n    body: \"I am working with .NET and EF. My personal projects involve React.\",\n  },\n];\n\nconst languages: LanguageInfo[] = [\n  { name: \"C#\", percentage: \"80%\" },\n  { name: \"C++\", percentage: \"70%\" },\n  { name: \"JavaScript\", percentage: \"60%\" },\n  { name: \"React\", percentage: \"60%\" },\n  { name: \"SQL\", percentage: \"55%\" },\n  { name: \"HTML\", percentage: \"55%\" },\n  { name: \"CSS\", percentage: \"50%\" },\n  { name: \"Rust\", percentage: \"50%\" },\n];\n\nconst projectCards: CardInfo[] = [\n  {\n    link: \"https://github.com/Narnian12/ckjm-analyzer\",\n    header: \"ckjm-analyzer\",\n    body: \"CLI application that analyzes Dependency Injection and Chidamber and Kemerer Java Metrics in Java class files.\",\n    footer: \"C#\",\n  },\n  {\n    link: \"https://github.com/Narnian12/ps-calculator\",\n    header: \"ps-calculator\",\n    body: \"Online calculator that executes simple math, tracks history, and supports keyboard use. Uses regex to generalize computational logic.\",\n    footer: \"React, TypeScript, HTML, CSS\",\n  },\n  {\n    link: \"https://github.com/Narnian12/todo-app-client\",\n    header: \"todo-app-client\",\n    body: \"Client-side application of todo app linked to a server deployed on Heroku. Responsive to mobile devices.\",\n    footer: \"React, TypeScript, GraphQL, Apollo Client\",\n  },\n  {\n    link: \"https://github.com/Narnian12/todo-app-server-expanded\",\n    header: \"todo-app-server-expanded\",\n    body: \"Server-side application of todo app deployed on Heroku. Uses a Prisma ORM SQLite database to store data.\",\n    footer: \"Node.js, Apollo Server Express, Prisma, GraphQL\",\n  },\n  {\n    link: \"https://github.com/Narnian12/tic-tac-toe\",\n    header: \"tic-tac-toe\",\n    body: \"Full implementation of tic-tac-toe game from React tutorial. Includes Redux to keep track of move history.\",\n    footer: \"React, TypeScript, Redux\",\n  },\n  {\n    link: \"https://github.com/Narnian12/ps-studio-ghibli-films\",\n    header: \"ps-studio-ghibli-films\",\n    body: \"Web application showcasing Studio Ghibli data from online API in grid format. Includes pagination support.\",\n    footer: \"React, TypeScript\",\n  },\n];\n\nconst App: FC = () => {\n  return (\n    <Wrapper>\n      <NavBar sections={navSections} />\n      <Header />\n      <AnimeQuote />\n      <Headers id=\"Profile\">\n        <Typography variant=\"h3\" color=\"text.primary\">\n          Profile\n        </Typography>\n      </Headers>\n      <Cards cards={profileCards} />\n      <Headers id=\"Languages\">\n        <Typography variant=\"h3\" color=\"text.primary\">\n          Languages\n        </Typography>\n      </Headers>\n      <Languages languages={languages} />\n      <Headers id=\"Projects\">\n        <Typography variant=\"h3\" color=\"text.primary\">\n          Projects\n        </Typography>\n      </Headers>\n      <Cards cards={projectCards} />\n    </Wrapper>\n  );\n};\n\nexport default App;\n\nconst Wrapper = styled.div`\n  text-align: center;\n`;\n\nconst Headers = styled.div`\n  width: 100%;\n  padding-top: 50px;\n  margin-top: -50px;\n  @media only screen and (max-width: 500px) {\n    padding-top: 70px;\n    margin-top: -70px;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createTheme, ThemeProvider } from \"@mui/material\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport {\n  BACKGROUND_COLOR,\n  TEXT_PRIMARY_COLOR,\n  TEXT_SECONDARY_COLOR,\n} from \"./utils/constants/css\";\n\nconst theme = createTheme({\n  palette: {\n    background: {\n      paper: BACKGROUND_COLOR,\n    },\n    text: {\n      primary: TEXT_PRIMARY_COLOR,\n      secondary: TEXT_SECONDARY_COLOR,\n    },\n  },\n});\n\nReactDOM.render(\n  <>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </>,\n  document.getElementById(\"root\")\n);\n","export const BACKGROUND_COLOR = \"#282828\";\nexport const TEXT_PRIMARY_COLOR = \"#FFFFFF\";\nexport const TEXT_SECONDARY_COLOR = \"#B0B3B8\";\n"],"sourceRoot":""}